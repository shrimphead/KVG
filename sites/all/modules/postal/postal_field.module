<?php
/*
  TODO/wishlist:
   - implement a nicer theme for form, including dropdowns and stuff.
   - widget settings to show/hide various fields (names, country, etc.)
   - Add views tables/arguments/filters for field components (zip, street, etc.)
 */

/**
 * Implementation of hook_field_info().
 */
function postal_field_field_info() {
  return array(
    'postal' => array(
      'label' => t('Postal address'),
      'description' => t('This field stores postal information.'),
      'default_widget' => 'postal_address',
      'default_formatter' => 'postal_default',
    ),
  );
}

/**
 * Implementation of hook_field_instance_settings().
 */
function postal_field_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  module_load_include('inc', 'postal', 'includes/postal.form');
  $form = postal_form_postal_general_settings($settings);
  return $form;
}

/**
 * Implementation of hook_field_views_data().
function postal_field_field_views_data() {
  // call above.  However, it discards any custom handlers and uses its own.
  // The following code reverts this behavior while retaining CCK's
  // relationships, labels, etc.

  // Start with CCK's defaults for this field.
  $data = content_views_field_views_data($field);

  // Reset the handlers to the orignal values from the Postal API.
  $table = content_views_tablename($field);
  foreach (postal_database_columns() as $name => $info) {
    if ($views = $info['views']) {
      $alias = $field['field_name'] .'_'. $name;
      foreach (array('field', 'filter', 'argument') as $key) {
        if (isset($views[$key]) && isset($data[$table][$alias][$key])) {
          $data[$table][$alias][$key] = array_merge($data[$table][$alias][$key], $views[$key]);
        }
      }
    }
  }
  return $data;
}
 */

/**
 * Implementation of hook_field_is_empty().
 */
function postal_field_field_is_empty($item, $field) {
  // The postal API already determines whether an address is empty - use that.
  $address = postal_address($item);
  return false;
  // @todo This check is returning TRUE, we need to determine why in postal_address().
  return $address->empty;
}

/**
 * Implemenation of hook_field_prepare_view().
 */
function postal_field_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
}

/**
 * Implementation of hook_widget_info().
 */
function postal_field_field_widget_info() {
  $widgets = array();
  $widgets['postal_field'] = array(
    'label' => t('Address form'),
    'field types' => array('postal'),
    'instance_settings' => array(
      'force_country' => FALSE,
      'force_state' => FALSE,
    ),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'default value' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
  $widgets['postal_general'] = array(
    'label' => t('Address component (state, city or zip)'),
    'field types' => array('postal'),
    'instance_settings' => array(
      'selection_types' => NULL,
      'force_country' => FALSE,
      'force_state' => FALSE,
    ),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'default value' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
  module_load_include('form.inc', 'postal', 'includes/postal');
  $widgets['postal_general']['settings'] = postal_form_postal_general_settings();

  return $widgets;
}

/**
 * Implementation of hook_widget_settings().
function postal_field_widget_settings($op, $widget) {
  switch ($op) {

    case 'form':
      module_load_include('form.inc', 'postal', 'includes/postal');

      // Use the "settings" callbacks from the the postal API.
      $func = 'postal_form_'. $widget['type'] .'_settings';
      if (function_exists($func)) {
        return array('postal' => $func($widget['postal']));
      }
      return;

    case 'save':
      return array('postal');
  }
}
*/

/**
 * Implementation of hook_field_validate().
 */
function postal_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // @todo better way of doing this?
  $values = array();
  foreach ($items as $delta => $item) {
    $values[$delta] = $item['address'];
  }
  $items = $values;
}

/**
 * Implementation of hook_widget().
 */
function postal_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $settings = $instance['widget']['settings'];
  // We know we're on the "default value" form because it's not fully-baked.
  // Unset any options that would stand in the way of setting useful defaults.
  /** @todo understand why this is here, and see if it's needed now.
  if (!$form['#id']) {
    $settings = array();
  }
  **/
  $element = array(
    '#title' => $instance['label'],
    '#type' => str_replace('_field', '', $instance['widget']['type']),
    '#postal_settings' => $settings,
    '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
  );
  return array('address' => $element);
}

/**
 * Implementation of hook_field_formatter_info().
 */
function postal_field_field_formatter_info() {
  return array(
    'postal_default' => array(
      'label' => 'Default',
      'field types' => array('postal'),
    ),
    'country' => array(
      'label' => t('Country'),
      'field types' => array('postal'),
    ),
    'city' => array(
      'label' => t('City'),
      'field types' => array('postal'),
    ),
    'state' => array(
      'label' => t('State'),
      'field types' => array('postal'),
    ),
    'zip' => array(
      'label' => t('Postal code'),
      'field types' => array('postal'),
    ),
  );
}

/**
 * Implementation of hook_theme().
function postal_field_theme($existing, $type, $theme, $path) {
  $registry = array();
  foreach (array('default', 'country', 'city', 'state', 'zip') as $func) {
    $function = ($func == 'default') ? 'postal_address' : 'postal_'. $func;
    $registry['postal_field_formatter_'. $func] = $existing[$function];
  }
  return $registry;
}
 */

/**
 * Implementation of hook_token_list().
 */
function postal_field_token_list($type = 'all') {
  if ($type == 'field' || $type == 'all') {
    $tokens = array();
    $tokens['postal']['country'] = t('Country');
    $tokens['postal']['state'] = t('State');
    $tokens['postal']['city'] = t('City');
    $tokens['postal']['zip'] = t('Postal code');
    $tokens['postal']['type'] = t('Postal type');
    $tokens['postal']['addresss'] = t('Address');
    return $tokens;
  }
}

/**
 * Implementation of hook_token_values().
 */
function postal_field_token_values($type, $object = NULL) {
  if($type == 'field') {
    $item = $object[0];
    $tokens['country'] = $item['country'];
    $tokens['state'] = $item['state'];
    $tokens['city'] = $item['city'];
    $tokens['zip'] = $item['zip'];
    $tokens['address'] = theme("postal_address", $item);
    return $tokens;
  }
}

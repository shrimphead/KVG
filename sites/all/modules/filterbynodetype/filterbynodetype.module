<?php

/**
 * @file
 * The Filter By Node Type module, which makes input filter configurable on a per-content-type basis.
 *
 * Drupal core gives you no possibility to limit given input filters to a defined set of
 * content types. This functionality is provided by the Filter By Node Type module. Common usage
 * examples are:
 *  - a designated filter for forums, blog entries etc. etc.
 */

/**
 * Constants.
 */
define('FILTERBYNODETYPE_COMMENT_RESTRICTIONS_NONE', 0);
define('FILTERBYNODETYPE_COMMENT_RESTRICTIONS_LIKE_NODE', 1);
define('FILTERBYNODETYPE_COMMENT_RESTRICTIONS_CUSTOM', 2);

/**
 * Implementation of hook_perm().
 */
function filterbynodetype_perm() {
  return array('bypass filter restrictions');
}

/**
 * Implementation of hook_form_alter().
 */
function filterbynodetype_form_alter(&$form, $form_state, $form_id) {

  // For node edit forms, filter out disallowed input formats.
  if (
    isset($form['#node'])
    &&
    $form['#node']->type .'_node_form' == $form_id
  ) {
    $node_type = $form['type']['#value'];
    _filterbynodetype_modify_formats($form['body_field']['format'], variable_get("filterbynodetype_$node_type", array_keys(filter_formats())));
  }
  else {
    switch($form_id) {
      case 'node_type_form':

        $node_type = $form['#node_type']->type;

        // Prepare format options.
        $options = array();
        foreach (filter_formats() as $format) {
          $options[$format->format] = $format->name;
        }

        // Allow users with the necessary permission to change what input formats
        // are allowed on a give node type.
        $form['submission']['filterbynodetype'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Allowed input formats'),
          '#description' => t("Specify which input formats will be allowed on this node type's body field.  Note that a user must still have access to the appropriate input format in order to be able to use it."),
          '#options' => $options,
          '#default_value' => variable_get("filterbynodetype_$node_type", array_keys($options)),
          '#access' => user_access('administer filters'),
        );

        // If comment settings are available, add the same options for the node's comments.
        if (module_exists('comment') && isset($form['comment'])) {
          $form['comment'][] = array(
            'filterbynodetype_comment_filters' => array(
              '#access' => user_access('administer filters'),
              '#type' => 'fieldset',
              '#title' => t('Comment input formats'),
              '#description' => t('Optionally restrict comment input formats.'),
              '#collapsible' => TRUE,
              'filterbynodetype_comment_filters_restrict' => array(
                '#type' => 'radios',
                '#title' => t('Restriction mode'),
                '#description' => t("Define how input formats for comments on this node type will be restricted. If you choose <em>same as node</em>, the above settings also apply to the node's comments (default). To set up custom restrictions below, chose <em>custom</em>."),
                '#options' => array(
                  FILTERBYNODETYPE_COMMENT_RESTRICTIONS_NONE => t('No restrictions'),
                  FILTERBYNODETYPE_COMMENT_RESTRICTIONS_LIKE_NODE => t('Same as node'),
                  FILTERBYNODETYPE_COMMENT_RESTRICTIONS_CUSTOM => t('Custom'),
                ),
                '#default_value' => variable_get("filterbynodetype_comment_filters_restrict_$node_type", FILTERBYNODETYPE_COMMENT_RESTRICTIONS_LIKE_NODE),
              ),
              'filterbynodetype_comment_input_formats' => array(
                '#type' => 'checkboxes',
                '#title' => t('Allowed input formats'),
                '#description' => t("Specify which input formats will be allowed on this node type's comments (if users have access to each of them). This settings will only have an effect if you chose <em>custom</em> right above."),
                '#options' => $options,
                '#default_value' => variable_get("filterbynodetype_comment_input_formats_$node_type", array_keys($options)),
                '#access' => user_access('administer filters'),
              ),
            ),
          );
        }
        break;
      case 'comment_form':
        // Load the corresponding node and determine the comment input format settings.
        $node = node_load($form['nid']['#value']);
        $comment_options = variable_get("filterbynodetype_comment_filters_restrict_$node->type", FILTERBYNODETYPE_COMMENT_RESTRICTIONS_LIKE_NODE);
        // Only proceed, if comments are set to be restricted.
        if ($comment_options != FILTERBYNODETYPE_COMMENT_RESTRICTIONS_NONE) {
          if ($comment_options == FILTERBYNODETYPE_COMMENT_RESTRICTIONS_LIKE_NODE) {
            $allowed_formats = variable_get("filterbynodetype_$node->type", array_keys(filter_formats()));
          }
          else {
            // Retrieve custom comment settings.
            $allowed_formats = variable_get("filterbynodetype_comment_input_formats_$node->type", array_keys(filter_formats()));
          }
          // Modify the filters form.
          _filterbynodetype_modify_formats($form['comment_filter']['format'], $allowed_formats);
        }
        break;
    }
  }
}

/**
 * Conditionally remove input formats from a format/textarea section.
 *
 * @param &$formats
 *   The referring field section, by reference.
 * @param $allowed_formats
 *   The formats allowed for this section.
 */
function _filterbynodetype_modify_formats(&$formats, $allowed_formats) {

  if (user_access('bypass filter restrictions')) {
    return;
  }

  // If the actual config has already limited the actual format option
  // count to one, we will save all additional work here as this must be
  // the system fallback filter format already. We will do nothing then.

  // Drupal core intents to always serve this format 
  // and we should not touch this default behavior for consistency's sake!

  // Basically, the "only one format" system default contains a sub key
  // also named "format" (other than if there were multiple formats).
  // we will not count it. The child element count is by default always 
  // one more item than the number of available formats.

  $temp_formats = array_flip(element_children($formats));
  unset($temp_formats['format']);
  if (count($temp_formats) > 2) {

    foreach (element_children($formats) as $element) {
      if (
          isset($formats[$element]['#return_value']) 
          && 

          // see above: we really should not delete the current
          // default format. At least not without providing this
          // as an optional decision to the site admin.
          // Just my 2 cents. #doitDave
          $formats[$element]['#return_value'] != variable_get('filter_default_format', 1)

          && 

          !in_array($formats[$element]['#return_value'], $allowed_formats)
      ) {
        unset($formats[$element]);
      }
    }

    if (2 == count(element_children($formats))) { // 1 format and 1 extra item for the link
      // If there's only one filter left, fold it down to just the description

      $formats = $form['body_field']['format'];
      // remember the children of the format section.
      // needed to identify the guidelines element later.
      $temp_formats =& $formats;

      // provide new container for format section rebuild
      $new_formats = array();

      // We don't know what the IDs are of the two fields, so we have to iterate to get them.
      foreach (element_children($formats) as $element) {
        if (isset($formats[$element]['#title'])) {
          // This is a filter, so we assign it to the filter set as the only option.
          $new_formats[$element] = array(
            '#type' => 'value',
            // feels better to use the original values here! #doitDave
            '#value' => $formats[$element]['#return_value'], 
            '#parents' => $formats[$element]['#parents'],
          );
          $new_formats['format'] = array( // I have no idea why it uses this structure, but this is what filter.module does.
            'guidelines' => array(
              '#title' => t('Formatting guidelines'),
              '#value' => $formats[$element]['#description'],
            ),
          );
          unset($temp_formats[$element]);
        }
      }
      $guidelines = $formats[array_shift(element_children($temp_formats))]['#value'];
      $formats = $new_formats;
      $formats[] = array(
        '#value' => $guidelines,
      );
    }
  }
}
